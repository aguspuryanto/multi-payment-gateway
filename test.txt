Untuk membuat package Composer untuk multi payment gateway yang mencakup berbagai jenis metode pembayaran dan negara, Anda perlu merancang sistem yang fleksibel, mudah dipasang, dan mudah digunakan. Berikut adalah langkah-langkah umum yang bisa Anda ikuti:

1. Tentukan Struktur Package
Anda perlu membuat struktur direktori yang jelas untuk package ini. Sebagai contoh:

/multi-payment-gateway
    /src
        /Gateways
            CCD.php
            CSH.php
            BTR.php
            PPL.php
            ...
        /Payflows
            Malaysia.php
            UAE.php
            Slovakia.php
            ...
    /tests
        GatewayTest.php
    /composer.json
    README.md

2. Buat Kelas Gateway
Setiap metode pembayaran harus memiliki kelasnya sendiri di dalam direktori Gateways. Setiap kelas ini akan memiliki fungsi terkait dengan proses pembayaran, misalnya untuk melakukan transaksi, mendapatkan status pembayaran, dll.

Contoh struktur kelas untuk gateway seperti CCD (Credit Card):

// src/Gateways/CCD.php
namespace MultiPaymentGateway\Gateways;

class CCD
{
    public function processPayment($amount, $currency)
    {
        // Proses pembayaran dengan Credit Card
        echo "Processing Credit Card Payment for $amount $currency\n";
        // Logika lainnya
    }
}
Lakukan hal yang sama untuk semua metode pembayaran lainnya seperti CSH (Cash on Delivery), BTR (Bank Transfer), dan seterusnya.

3. Buat Kelas Payflow
Payflow adalah pengaturan berdasarkan negara. Anda akan membutuhkan kelas yang mengelola pengaturan atau konfigurasi berdasarkan negara atau wilayah.

Contoh untuk Payflow di Malaysia:

// src/Payflows/Malaysia.php
namespace MultiPaymentGateway\Payflows;

class Malaysia
{
    public function getConfig()
    {
        return [
            'currency' => 'MYR',
            'tax_rate' => 0.06, // Misalnya ada pajak 6%
        ];
    }
}
Anda perlu membuat kelas serupa untuk negara lainnya seperti UAE, Slovakia, dll.

4. Pengelolaan dan Integrasi
Buat kelas utama yang mengelola pembayaran dan memilih metode berdasarkan input pengguna. Anda bisa menggunakan factory pattern di sini untuk memilih gateway dan payflow yang tepat.

// src/PaymentManager.php
namespace MultiPaymentGateway;

use MultiPaymentGateway\Gateways\CCD;
use MultiPaymentGateway\Payflows\Malaysia;

class PaymentManager
{
    protected $gateway;
    protected $payflow;

    public function __construct($gatewayCode, $payflowCode)
    {
        $this->gateway = $this->getGateway($gatewayCode);
        $this->payflow = $this->getPayflow($payflowCode);
    }

    public function getGateway($code)
    {
        // Mengembalikan instance gateway berdasarkan kode
        $gateways = [
            'CCD' => new Gateways\CCD(),
            'CSH' => new Gateways\CSH(),
            // Tambahkan lainnya sesuai kebutuhan
        ];

        return $gateways[$code] ?? null;
    }

    public function getPayflow($code)
    {
        // Mengembalikan instance payflow berdasarkan kode negara
        $payflows = [
            'MY' => new Payflows\Malaysia(),
            'AE' => new Payflows\UAE(),
            // Tambahkan lainnya sesuai kebutuhan
        ];

        return $payflows[$code] ?? null;
    }

    public function process($amount, $currency)
    {
        if ($this->gateway) {
            $this->gateway->processPayment($amount, $currency);
        }

        if ($this->payflow) {
            $config = $this->payflow->getConfig();
            echo "Tax rate for {$config['currency']}: {$config['tax_rate']}\n";
        }
    }
}
5. File composer.json
Untuk mengonfigurasi Composer agar package Anda dapat diinstall, buat file composer.json di root direktori project.

{
    "name": "your-vendor/multi-payment-gateway",
    "description": "Multi Payment Gateway for various payment methods and countries.",
    "autoload": {
        "psr-4": {
            "MultiPaymentGateway\\": "src/"
        }
    },
    "require": {
        "php": "^7.4 || ^8.0"
    },
    "autoload-dev": {
        "psr-4": {
            "MultiPaymentGateway\\Tests\\": "tests/"
        }
    },
    "minimum-stability": "dev",
    "prefer-stable": true
}

6. Menulis Tes (Optional)
Tambahkan file pengujian untuk memastikan semuanya berjalan dengan baik, menggunakan PHPUnit atau framework testing lainnya.

// tests/GatewayTest.php
use MultiPaymentGateway\PaymentManager;

class GatewayTest extends \PHPUnit\Framework\TestCase
{
    public function testProcessPayment()
    {
        $paymentManager = new PaymentManager('CCD', 'MY');
        $paymentManager->process(100, 'MYR');
        $this->expectOutputString("Processing Credit Card Payment for 100 MYR\nTax rate for MYR: 0.06\n");
    }
}

7. Menambahkan Dokumentasi
Jangan lupa untuk menambahkan file README.md dengan petunjuk cara instalasi dan penggunaan package Anda.

8. Publikasi Package
Setelah semuanya siap, Anda bisa mempublikasikan package ini ke Packagist, platform resmi untuk distribusi package Composer.

9. Penggunaan dalam Proyek
Setelah package dipublikasikan, pengguna bisa menginstalnya dengan:

composer require your-vendor/multi-payment-gateway
Dan menggunakannya seperti berikut:

use MultiPaymentGateway\PaymentManager;

$payment = new PaymentManager('CCD', 'MY');
$payment->process(200, 'MYR');
10. Menambahkan Fitur Lain (Opsional)
Anda bisa menambahkan lebih banyak fitur, seperti integrasi dengan API gateway, penanganan exception, dan sebagainya.

Dengan mengikuti langkah-langkah ini, Anda dapat membuat Composer package untuk berbagai payment gateway yang mudah digunakan oleh pengembang lainnya.

// MY - CCD
            if ($mb_order == 1) {
                $params = "invNo=$mb_invno&amt=$mb_edisc_amt&memcode=$mb_code&cn_id=$mb_shipcnt&cctype=$mb_cctype";
                $turl = $config->base_url . "payment/PBB/pbb_go.php?payref=$xrandom";

                $url = $turl;
                $bank_url = $url;
            }
            // MY - CLK
            if ($mb_order == 9) {
                $go_url = $config->base_url . "payment/CLK/go_cimb.php";
                //$turl = urlencode("https://uat.cimbclicks.com.my/TIBSEPWeb/ePayment.do");
                $turl = urlencode($config->cimb_url);
                $responseURL = urlencode($config->base_url . "payment/CLK/return_cimb.php");
                $params = "invoice=$mb_invno&turl=$turl&response=$responseURL&memcode=$mb_code&amount=$mb_edisc_amt";
                //$url = $go_url . "?invoice=$mb_invno&turl=$turl&response=$responseURL&memcode=$mb_code&amount=$mb_edisc_amt";
                $url = $go_url . "?payref=$xrandom";
                $bank_url = $url;
            }